/* eslint-disable */
import * as graphql from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  fragment AboutCardFragment on Query {\n    aboutCards {\n      id\n      title\n      excerpt\n      img {\n        img {\n          id\n          url\n          hash\n        }\n      }\n    }\n  }\n": graphql.AboutCardFragmentFragmentDoc,
    "\n  fragment ArticleListFragment on Query {\n    list: articles(limit: 7, start: $start, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      excerpt\n      user {\n        username\n      }\n    }\n  }\n": graphql.ArticleListFragmentFragmentDoc,
    "\n  mutation updateCommentLikes(\n    $commentID: ID!\n    $likes: [editComponentBlogLikeInput]\n    $dislikes: [editComponentBlogDislikeInput]\n  ) {\n    updateComment(input: { where: { id: $commentID }, data: { likes: $likes, dislikes: $dislikes } }) {\n      comment {\n        id\n        likes {\n          user {\n            id\n          }\n        }\n        dislikes {\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n": graphql.UpdateCommentLikesDocument,
    "\n  mutation AddComment($articleID: ID!, $userID: ID!, $content: String!, $date: DateTime!, $parentID: ID) {\n    createComment(\n      input: { data: { article: $articleID, user: $userID, content: $content, date: $date, parent: $parentID } }\n    ) {\n      comment {\n        id\n        content\n        user {\n          id\n        }\n        article {\n          id\n        }\n        date\n        parent {\n          id\n        }\n      }\n    }\n  }\n": graphql.AddCommentDocument,
    "\n  query Comments($slug: String) {\n    me {\n      id\n      username\n      avatar\n    }\n    comments(where: { article: { slug: $slug }, parent_null: true }) {\n      id\n      content\n      article {\n        id\n      }\n      user {\n        id\n        username\n        avatar\n      }\n      likes {\n        user {\n          id\n        }\n      }\n      dislikes {\n        user {\n          id\n        }\n      }\n      children {\n        id\n        content\n        user {\n          id\n          username\n          avatar\n        }\n        likes {\n          user {\n            id\n          }\n        }\n        dislikes {\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n": graphql.CommentsDocument,
    "\n  fragment SidebarArticlesFragment on Query {\n    sidebar: articles(limit: 4, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      excerpt\n      user {\n        username\n      }\n    }\n    avatar(id: \"1\") {\n      ...AvatarFragment\n    }\n  }\n": graphql.SidebarArticlesFragmentFragmentDoc,
    "\n  mutation AddEmail($name: String!, $email: String!, $message: String!) {\n    createEmail(input: { data: { name: $name, email: $email, message: $message } }) {\n      email {\n        id\n        name\n        email\n        message\n      }\n    }\n  }\n": graphql.AddEmailDocument,
    "\n  query getAlbums($slug: [String!]) {\n    albums(where: { slug: $slug }) {\n      id\n      title\n      slug\n      cover {\n        img {\n          id\n          url\n        }\n      }\n      excerpt\n      albumID\n    }\n  }\n": graphql.GetAlbumsDocument,
    "\n  fragment AlbumFragment on Query {\n    albums(sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      date\n      location\n      user {\n        username\n      }\n    }\n  }\n": graphql.AlbumFragmentFragmentDoc,
    "\n  fragment BiographyFragment on Query {\n    avatar(id: \"1\") {\n      id\n      bio\n      ...AvatarFragment\n    }\n  }": graphql.BiographyFragmentFragmentDoc,
    "\n  fragment ImageBannerFragment on Query {\n    hero(id: 1) {\n      id\n      hero {\n        id\n        title\n        cover {\n          img {\n            id\n            url\n            hash\n          }\n        }\n      }\n    }\n  }\n": graphql.ImageBannerFragmentFragmentDoc,
    "\n  fragment RecentAlbumFragment on Query {\n    albums(limit: 4, sort: \"date:desc\", where: { published: true }) {\n      slug\n      id\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      location\n      user {\n        username\n      }\n    }\n  }\n": graphql.RecentAlbumFragmentFragmentDoc,
    "\n  fragment RecentArticlesFragment on Query {\n    articles(limit: 3, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      excerpt\n      date\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      user {\n        username\n      }\n    }\n  }\n": graphql.RecentArticlesFragmentFragmentDoc,
    "\n  fragment NavigationFragment on Query {\n    nav(id: 1) {\n      nav {\n        id\n        title\n        url\n      }\n    }\n  }\n": graphql.NavigationFragmentFragmentDoc,
    "\n  fragment AvatarFragment on Avatar {\n    avatar {\n      img {\n        id\n        url\n        hash\n      }\n    }\n  }\n": graphql.AvatarFragmentFragmentDoc,
    "\n  fragment ContactFragment on Resume {\n    address\n    phoneNum\n  }\n": graphql.ContactFragmentFragmentDoc,
    "\n  fragment EducationFragment on Resume {\n    edu\n  }\n": graphql.EducationFragmentFragmentDoc,
    "\n  fragment HobbiesFragment on Resume {\n    hobbies\n  }\n": graphql.HobbiesFragmentFragmentDoc,
    "\n  fragment HighlightImgFragment on Resume {\n    highlight {\n      img {\n        id\n        url\n        hash\n      }\n    }\n  }\n": graphql.HighlightImgFragmentFragmentDoc,
    "\n  fragment ResumeEmailFragment on Resume {\n    email\n  }\n": graphql.ResumeEmailFragmentFragmentDoc,
    "\n  fragment SkillsFragment on Resume {\n    skills\n  }\n": graphql.SkillsFragmentFragmentDoc,
    "\n  fragment WorkExpFragment on Resume {\n    workExp\n  }\n": graphql.WorkExpFragmentFragmentDoc,
    "\n  fragment VideoFragment on Query {\n    videos(sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      date\n      tag {\n        tag\n      }\n      user {\n        username\n      }\n    }\n  }\n": graphql.VideoFragmentFragmentDoc,
    "\n  query getVideos($slug: [String!]) {\n    videos(where: { slug: $slug }) {\n      id\n      title\n      slug\n      cover {\n        img {\n          id\n          url\n        }\n      }\n      excerpt\n      #      tag {\n      #        tag\n      #      }\n      videoID\n    }\n  }\n": graphql.GetVideosDocument,
    "\n  query getAboutCards {\n    ...NavigationFragment\n    ...AboutCardFragment\n  }": graphql.GetAboutCardsDocument,
    "\n  query getAlbumPage {\n    ...NavigationFragment\n    ...AlbumFragment\n  }": graphql.GetAlbumPageDocument,
    "\n  query getArticles($start: Int!) {\n    ...NavigationFragment\n    ...ArticleListFragment\n    ...SidebarArticlesFragment\n  }": graphql.GetArticlesDocument,
    "\n  query Article($slug: String) {\n    ...NavigationFragment\n    articles(where: { slug: $slug }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      excerpt\n      content\n      tag {\n        tag\n      }\n    }\n    ...SidebarArticlesFragment\n  }": graphql.ArticleDocument,
    "\n  query getContactPage {\n    ...NavigationFragment\n  }": graphql.GetContactPageDocument,
    "  \n    query getHomePage {\n    ...NavigationFragment\n    ...ImageBannerFragment\n    ...BiographyFragment\n    ...RecentArticlesFragment\n    ...RecentAlbumFragment\n  }": graphql.GetHomePageDocument,
    "\n  query getResumeQuery {\n    resume(id: 1) {\n      id\n      ...ContactFragment\n      ...WorkExpFragment\n      ...EducationFragment\n      ...SkillsFragment\n      ...HighlightImgFragment\n      ...HobbiesFragment\n      ...ResumeEmailFragment\n    }\n  }": graphql.GetResumeQueryDocument,
    "\n  query getVlogPage {\n    ...NavigationFragment\n    ...VideoFragment\n  }": graphql.GetVlogPageDocument,
};

export function gql(source: "\n  fragment AboutCardFragment on Query {\n    aboutCards {\n      id\n      title\n      excerpt\n      img {\n        img {\n          id\n          url\n          hash\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AboutCardFragment on Query {\n    aboutCards {\n      id\n      title\n      excerpt\n      img {\n        img {\n          id\n          url\n          hash\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment ArticleListFragment on Query {\n    list: articles(limit: 7, start: $start, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      excerpt\n      user {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ArticleListFragment on Query {\n    list: articles(limit: 7, start: $start, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      excerpt\n      user {\n        username\n      }\n    }\n  }\n"];
export function gql(source: "\n  mutation updateCommentLikes(\n    $commentID: ID!\n    $likes: [editComponentBlogLikeInput]\n    $dislikes: [editComponentBlogDislikeInput]\n  ) {\n    updateComment(input: { where: { id: $commentID }, data: { likes: $likes, dislikes: $dislikes } }) {\n      comment {\n        id\n        likes {\n          user {\n            id\n          }\n        }\n        dislikes {\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentLikes(\n    $commentID: ID!\n    $likes: [editComponentBlogLikeInput]\n    $dislikes: [editComponentBlogDislikeInput]\n  ) {\n    updateComment(input: { where: { id: $commentID }, data: { likes: $likes, dislikes: $dislikes } }) {\n      comment {\n        id\n        likes {\n          user {\n            id\n          }\n        }\n        dislikes {\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  mutation AddComment($articleID: ID!, $userID: ID!, $content: String!, $date: DateTime!, $parentID: ID) {\n    createComment(\n      input: { data: { article: $articleID, user: $userID, content: $content, date: $date, parent: $parentID } }\n    ) {\n      comment {\n        id\n        content\n        user {\n          id\n        }\n        article {\n          id\n        }\n        date\n        parent {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddComment($articleID: ID!, $userID: ID!, $content: String!, $date: DateTime!, $parentID: ID) {\n    createComment(\n      input: { data: { article: $articleID, user: $userID, content: $content, date: $date, parent: $parentID } }\n    ) {\n      comment {\n        id\n        content\n        user {\n          id\n        }\n        article {\n          id\n        }\n        date\n        parent {\n          id\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  query Comments($slug: String) {\n    me {\n      id\n      username\n      avatar\n    }\n    comments(where: { article: { slug: $slug }, parent_null: true }) {\n      id\n      content\n      article {\n        id\n      }\n      user {\n        id\n        username\n        avatar\n      }\n      likes {\n        user {\n          id\n        }\n      }\n      dislikes {\n        user {\n          id\n        }\n      }\n      children {\n        id\n        content\n        user {\n          id\n          username\n          avatar\n        }\n        likes {\n          user {\n            id\n          }\n        }\n        dislikes {\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Comments($slug: String) {\n    me {\n      id\n      username\n      avatar\n    }\n    comments(where: { article: { slug: $slug }, parent_null: true }) {\n      id\n      content\n      article {\n        id\n      }\n      user {\n        id\n        username\n        avatar\n      }\n      likes {\n        user {\n          id\n        }\n      }\n      dislikes {\n        user {\n          id\n        }\n      }\n      children {\n        id\n        content\n        user {\n          id\n          username\n          avatar\n        }\n        likes {\n          user {\n            id\n          }\n        }\n        dislikes {\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment SidebarArticlesFragment on Query {\n    sidebar: articles(limit: 4, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      excerpt\n      user {\n        username\n      }\n    }\n    avatar(id: \"1\") {\n      ...AvatarFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SidebarArticlesFragment on Query {\n    sidebar: articles(limit: 4, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      excerpt\n      user {\n        username\n      }\n    }\n    avatar(id: \"1\") {\n      ...AvatarFragment\n    }\n  }\n"];
export function gql(source: "\n  mutation AddEmail($name: String!, $email: String!, $message: String!) {\n    createEmail(input: { data: { name: $name, email: $email, message: $message } }) {\n      email {\n        id\n        name\n        email\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddEmail($name: String!, $email: String!, $message: String!) {\n    createEmail(input: { data: { name: $name, email: $email, message: $message } }) {\n      email {\n        id\n        name\n        email\n        message\n      }\n    }\n  }\n"];
export function gql(source: "\n  query getAlbums($slug: [String!]) {\n    albums(where: { slug: $slug }) {\n      id\n      title\n      slug\n      cover {\n        img {\n          id\n          url\n        }\n      }\n      excerpt\n      albumID\n    }\n  }\n"): (typeof documents)["\n  query getAlbums($slug: [String!]) {\n    albums(where: { slug: $slug }) {\n      id\n      title\n      slug\n      cover {\n        img {\n          id\n          url\n        }\n      }\n      excerpt\n      albumID\n    }\n  }\n"];
export function gql(source: "\n  fragment AlbumFragment on Query {\n    albums(sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      date\n      location\n      user {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AlbumFragment on Query {\n    albums(sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      date\n      location\n      user {\n        username\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment BiographyFragment on Query {\n    avatar(id: \"1\") {\n      id\n      bio\n      ...AvatarFragment\n    }\n  }"): (typeof documents)["\n  fragment BiographyFragment on Query {\n    avatar(id: \"1\") {\n      id\n      bio\n      ...AvatarFragment\n    }\n  }"];
export function gql(source: "\n  fragment ImageBannerFragment on Query {\n    hero(id: 1) {\n      id\n      hero {\n        id\n        title\n        cover {\n          img {\n            id\n            url\n            hash\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ImageBannerFragment on Query {\n    hero(id: 1) {\n      id\n      hero {\n        id\n        title\n        cover {\n          img {\n            id\n            url\n            hash\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment RecentAlbumFragment on Query {\n    albums(limit: 4, sort: \"date:desc\", where: { published: true }) {\n      slug\n      id\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      location\n      user {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RecentAlbumFragment on Query {\n    albums(limit: 4, sort: \"date:desc\", where: { published: true }) {\n      slug\n      id\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      date\n      location\n      user {\n        username\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment RecentArticlesFragment on Query {\n    articles(limit: 3, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      excerpt\n      date\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      user {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RecentArticlesFragment on Query {\n    articles(limit: 3, sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      excerpt\n      date\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      user {\n        username\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment NavigationFragment on Query {\n    nav(id: 1) {\n      nav {\n        id\n        title\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NavigationFragment on Query {\n    nav(id: 1) {\n      nav {\n        id\n        title\n        url\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment AvatarFragment on Avatar {\n    avatar {\n      img {\n        id\n        url\n        hash\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AvatarFragment on Avatar {\n    avatar {\n      img {\n        id\n        url\n        hash\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment ContactFragment on Resume {\n    address\n    phoneNum\n  }\n"): (typeof documents)["\n  fragment ContactFragment on Resume {\n    address\n    phoneNum\n  }\n"];
export function gql(source: "\n  fragment EducationFragment on Resume {\n    edu\n  }\n"): (typeof documents)["\n  fragment EducationFragment on Resume {\n    edu\n  }\n"];
export function gql(source: "\n  fragment HobbiesFragment on Resume {\n    hobbies\n  }\n"): (typeof documents)["\n  fragment HobbiesFragment on Resume {\n    hobbies\n  }\n"];
export function gql(source: "\n  fragment HighlightImgFragment on Resume {\n    highlight {\n      img {\n        id\n        url\n        hash\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment HighlightImgFragment on Resume {\n    highlight {\n      img {\n        id\n        url\n        hash\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment ResumeEmailFragment on Resume {\n    email\n  }\n"): (typeof documents)["\n  fragment ResumeEmailFragment on Resume {\n    email\n  }\n"];
export function gql(source: "\n  fragment SkillsFragment on Resume {\n    skills\n  }\n"): (typeof documents)["\n  fragment SkillsFragment on Resume {\n    skills\n  }\n"];
export function gql(source: "\n  fragment WorkExpFragment on Resume {\n    workExp\n  }\n"): (typeof documents)["\n  fragment WorkExpFragment on Resume {\n    workExp\n  }\n"];
export function gql(source: "\n  fragment VideoFragment on Query {\n    videos(sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      date\n      tag {\n        tag\n      }\n      user {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment VideoFragment on Query {\n    videos(sort: \"date:desc\", where: { published: true }) {\n      id\n      slug\n      title\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      date\n      tag {\n        tag\n      }\n      user {\n        username\n      }\n    }\n  }\n"];
export function gql(source: "\n  query getVideos($slug: [String!]) {\n    videos(where: { slug: $slug }) {\n      id\n      title\n      slug\n      cover {\n        img {\n          id\n          url\n        }\n      }\n      excerpt\n      #      tag {\n      #        tag\n      #      }\n      videoID\n    }\n  }\n"): (typeof documents)["\n  query getVideos($slug: [String!]) {\n    videos(where: { slug: $slug }) {\n      id\n      title\n      slug\n      cover {\n        img {\n          id\n          url\n        }\n      }\n      excerpt\n      #      tag {\n      #        tag\n      #      }\n      videoID\n    }\n  }\n"];
export function gql(source: "\n  query getAboutCards {\n    ...NavigationFragment\n    ...AboutCardFragment\n  }"): (typeof documents)["\n  query getAboutCards {\n    ...NavigationFragment\n    ...AboutCardFragment\n  }"];
export function gql(source: "\n  query getAlbumPage {\n    ...NavigationFragment\n    ...AlbumFragment\n  }"): (typeof documents)["\n  query getAlbumPage {\n    ...NavigationFragment\n    ...AlbumFragment\n  }"];
export function gql(source: "\n  query getArticles($start: Int!) {\n    ...NavigationFragment\n    ...ArticleListFragment\n    ...SidebarArticlesFragment\n  }"): (typeof documents)["\n  query getArticles($start: Int!) {\n    ...NavigationFragment\n    ...ArticleListFragment\n    ...SidebarArticlesFragment\n  }"];
export function gql(source: "\n  query Article($slug: String) {\n    ...NavigationFragment\n    articles(where: { slug: $slug }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      excerpt\n      content\n      tag {\n        tag\n      }\n    }\n    ...SidebarArticlesFragment\n  }"): (typeof documents)["\n  query Article($slug: String) {\n    ...NavigationFragment\n    articles(where: { slug: $slug }) {\n      id\n      slug\n      cover {\n        img {\n          id\n          url\n          hash\n        }\n      }\n      title\n      excerpt\n      content\n      tag {\n        tag\n      }\n    }\n    ...SidebarArticlesFragment\n  }"];
export function gql(source: "\n  query getContactPage {\n    ...NavigationFragment\n  }"): (typeof documents)["\n  query getContactPage {\n    ...NavigationFragment\n  }"];
export function gql(source: "  \n    query getHomePage {\n    ...NavigationFragment\n    ...ImageBannerFragment\n    ...BiographyFragment\n    ...RecentArticlesFragment\n    ...RecentAlbumFragment\n  }"): (typeof documents)["  \n    query getHomePage {\n    ...NavigationFragment\n    ...ImageBannerFragment\n    ...BiographyFragment\n    ...RecentArticlesFragment\n    ...RecentAlbumFragment\n  }"];
export function gql(source: "\n  query getResumeQuery {\n    resume(id: 1) {\n      id\n      ...ContactFragment\n      ...WorkExpFragment\n      ...EducationFragment\n      ...SkillsFragment\n      ...HighlightImgFragment\n      ...HobbiesFragment\n      ...ResumeEmailFragment\n    }\n  }"): (typeof documents)["\n  query getResumeQuery {\n    resume(id: 1) {\n      id\n      ...ContactFragment\n      ...WorkExpFragment\n      ...EducationFragment\n      ...SkillsFragment\n      ...HighlightImgFragment\n      ...HobbiesFragment\n      ...ResumeEmailFragment\n    }\n  }"];
export function gql(source: "\n  query getVlogPage {\n    ...NavigationFragment\n    ...VideoFragment\n  }"): (typeof documents)["\n  query getVlogPage {\n    ...NavigationFragment\n    ...VideoFragment\n  }"];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;