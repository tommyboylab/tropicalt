/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  fragment AboutCardFragment on Query {\n  about {\n    data {\n      attributes {\n        AboutCard {\n          id\n          Tagline\n          Extension\n          Img {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n": types.AboutCardFragmentFragmentDoc,
    "\n  fragment ArticleListFragment on Query {\n    list: articles(sort: \"Published:desc\", pagination: { start: $start, limit: 7 }) {\n      data {\n        id\n        attributes {\n          Slug\n          Title\n          Tagline\n          Published\n          Author {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ArticleListFragmentFragmentDoc,
    "\nmutation updateCommentLikes(\n  $commentId: ID!\n  $likes: Int!\n  $dislikes: Int!\n) {\n  updateComment(\n    id: $commentId\n    data: { Likes: { UserId: $likes }, Dislikes: { UserId: $dislikes } }\n  ) {\n    data {\n      id\n      attributes {\n        Likes {\n          UserId\n        }\n        Dislikes {\n          UserId\n        }\n      }\n    }\n  }\n}\n\n": types.UpdateCommentLikesDocument,
    "\nquery getUser($userId: ID!) {\n  usersPermissionsUser(id: $userId) {\n    data {\n      attributes {\n        username\n        avatar {\n          img {\n            data {\n              id\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.GetUserDocument,
    "\n  mutation AddComment($articleId: ID!, $userId: ID!, $content: String!, $date: DateTime!, $parentId: ID) {\n    createComment(\n      data: { article: $articleId, Author: $userId, Content: $content, Published: $date, Parent: $parentId }\n    ) {\n      data {\n        id\n        attributes {\n          Content\n          Author {\n            data {\n              id\n            }\n          }\n          article {\n            data {\n              id\n            }\n          }\n          Published\n          Parent {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AddCommentDocument,
    "\n query Comments($slug: String) {\n  me {\n    id\n  }\n  comments(filters: { article: { Slug: { eq: $slug } }, Parent: null }) {\n    data {\n      id\n      attributes {\n        article {\n          data {\n            id\n            attributes {\n              Slug\n            }\n          }\n        }\n        Author {\n          data {\n            attributes {\n              username\n              avatar {\n                img {\n                  data {\n                    attributes {\n                      url\n                      hash\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        Content\n        Children {\n          data {\n            attributes {\n              Content\n              createdAt\n              updatedAt\n              Likes {\n                UserId\n              }\n              Dislikes {\n                UserId\n              }\n              Author {\n                data {\n                  attributes {\n                    username\n                    avatar {\n                      img {\n                        data {\n                          attributes {\n                            url\n                            hash\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        createdAt\n        updatedAt\n        Likes {\n          UserId\n        }\n        Dislikes {\n          UserId\n        }\n      }\n    }\n  }\n}\n": types.CommentsDocument,
    "\n fragment SidebarArticlesFragment on Query {\n  sidebar: articles(sort: \"Published:desc\", pagination: { limit: 4 }) {\n    data {\n      id\n      attributes {\n        Slug\n        Title\n        Tagline\n        Published\n        Author {\n          data {\n            attributes {\n              username\n              avatar {\n                img {\n                  data {\n                    id\n                    attributes {\n                      url\n                      hash\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              id\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.SidebarArticlesFragmentFragmentDoc,
    "\nmutation AddEmail($name: String!, $email: String!, $message: String!) {\n  createContact(data: { Name: $name, Email: $email, Message: $message }) {\n    data {\n      attributes {\n        Name\n        Email\n        Message\n      }\n    }\n  }\n}\n": types.AddEmailDocument,
    "\n  query getAlbums($slug: String!) {\n    albums(filters: { Slug: { eq: $slug } }) {\n      data {\n        attributes {\n          Name\n          Tagline\n          Slug\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          GPhotoId\n        }\n      }\n    }\n  }\n": types.GetAlbumsDocument,
    "\n  fragment AlbumFragment on Query {\n    albums(sort: \"Date:desc\") {\n      data {\n      id\n        attributes {\n          Name\n          Tagline\n          Slug\n          Date\n          Location\n          Photographer {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          GPhotoId\n        }\n      }\n    }\n  }\n": types.AlbumFragmentFragmentDoc,
    "\n  fragment BiographyFragment on Query {\nusersPermissionsUser(id:1){\n  data{\n    id\n    attributes{\n      biography\n      avatar{\n        img{\n          data{\n            id\n            attributes{\n              url\n              hash\n            }\n          }\n        }\n      }\n    }\n  }\n}}": types.BiographyFragmentFragmentDoc,
    "\n  fragment HeroFragment on Query {\n  home {\n    data {\n      attributes {\n        Hero {\n          id\n          Img {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          Caption\n        }\n      }\n    }\n  }\n}\n": types.HeroFragmentFragmentDoc,
    "\n  fragment RecentAlbumsFragment on Query {\n      albums(sort: \"Date:desc\", pagination: { start: 0, limit: 4 }) {\n    data {\n      id\n      attributes {\n        Slug\n        Name\n        Tagline\n        Date\n        Location\n        Photographer {\n          data {\n            attributes {\n              username\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n": types.RecentAlbumsFragmentFragmentDoc,
    "\n  fragment RecentArticlesFragment on Query {\n articles(sort:\"Published:desc\", pagination: { start: 0, limit: 3}){\n    data {\n      id\n      attributes {\n        Slug\n        Title\n        Tagline\n        Published\n        Author{\n          data{\n            attributes{\n              username\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n": types.RecentArticlesFragmentFragmentDoc,
    "\n  fragment NavigationFragment on Query {\n    navLink {\n      data {\n        attributes {\n          Link {\n            id\n            Name\n            URL\n          }\n        }\n      }\n    }\n  }\n": types.NavigationFragmentFragmentDoc,
    "\n  fragment NewNavigationFragment on Query {\n    navLink {\n      data {\n        attributes {\n          Link {\n            id\n            Name\n            URL\n          }\n        }\n      }\n    }\n  }\n": types.NewNavigationFragmentFragmentDoc,
    "\n  fragment ContactFragment on Resume {\n    Address\n    Phone\n  }\n": types.ContactFragmentFragmentDoc,
    "\n  fragment EducationFragment on Resume {\n    Education\n  }\n": types.EducationFragmentFragmentDoc,
    "\n  fragment HobbiesFragment on Resume {\n    Hobbies\n  }\n": types.HobbiesFragmentFragmentDoc,
    "\n  fragment HighlightImgFragment on Resume {\n    Img {\n      img {\n        data {\n          id\n          attributes {\n            url\n            hash\n          }\n        }\n      }\n    }\n  }\n": types.HighlightImgFragmentFragmentDoc,
    "\n  fragment ResumeEmailFragment on Resume {\n    email\n  }\n": types.ResumeEmailFragmentFragmentDoc,
    "\n  fragment SkillsFragment on Resume {\n    Skills\n  }\n": types.SkillsFragmentFragmentDoc,
    "\n  fragment WorkExpFragment on Resume {\n    Experience\n  }\n": types.WorkExpFragmentFragmentDoc,
    "\n  query GetAboutPage {\n    ...NavigationFragment\n    ...AboutCardFragment\n  }\n": types.GetAboutPageDocument,
    "\n  query GetAlbumPage {\n    ...NavigationFragment\n    ...AlbumFragment\n  }\n": types.GetAlbumPageDocument,
    "\n  query GetArticles($start: Int!) {\n    ...NavigationFragment\n    ...ArticleListFragment\n    ...SidebarArticlesFragment\n  }\n": types.GetArticlesDocument,
    "\nquery Articles {\n  articles {\n    data {\n      id\n      attributes {\n        Slug\n      }\n    }\n  }\n}\n": types.ArticlesDocument,
    "\n  query Article($slug: String) {\n    ...NavigationFragment\n    articles(filters: { Slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          Slug\n          Title\n          Tagline\n          Published\n          Content\n          Author {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...SidebarArticlesFragment\n  }\n": types.ArticleDocument,
    "\n  query GetContactPage {\n    ...NavigationFragment\n  }\n": types.GetContactPageDocument,
    "\n  query GetHomePage {\n    ...NavigationFragment\n    ...HeroFragment\n    ...BiographyFragment\n    ...RecentArticlesFragment\n    ...RecentAlbumsFragment\n  }\n": types.GetHomePageDocument,
    "\n  query GetResumeQuery {\n    resume {\n      data {\n        id\n        attributes {\n          ...ContactFragment\n          ...WorkExpFragment\n          ...EducationFragment\n          ...SkillsFragment\n          ...HighlightImgFragment\n          ...HobbiesFragment\n          ...ResumeEmailFragment\n        }\n      }\n    }\n  }\n": types.GetResumeQueryDocument,
};

export function gql(source: "\n  fragment AboutCardFragment on Query {\n  about {\n    data {\n      attributes {\n        AboutCard {\n          id\n          Tagline\n          Extension\n          Img {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n"): (typeof documents)["\n  fragment AboutCardFragment on Query {\n  about {\n    data {\n      attributes {\n        AboutCard {\n          id\n          Tagline\n          Extension\n          Img {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n"];
export function gql(source: "\n  fragment ArticleListFragment on Query {\n    list: articles(sort: \"Published:desc\", pagination: { start: $start, limit: 7 }) {\n      data {\n        id\n        attributes {\n          Slug\n          Title\n          Tagline\n          Published\n          Author {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ArticleListFragment on Query {\n    list: articles(sort: \"Published:desc\", pagination: { start: $start, limit: 7 }) {\n      data {\n        id\n        attributes {\n          Slug\n          Title\n          Tagline\n          Published\n          Author {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\nmutation updateCommentLikes(\n  $commentId: ID!\n  $likes: Int!\n  $dislikes: Int!\n) {\n  updateComment(\n    id: $commentId\n    data: { Likes: { UserId: $likes }, Dislikes: { UserId: $dislikes } }\n  ) {\n    data {\n      id\n      attributes {\n        Likes {\n          UserId\n        }\n        Dislikes {\n          UserId\n        }\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nmutation updateCommentLikes(\n  $commentId: ID!\n  $likes: Int!\n  $dislikes: Int!\n) {\n  updateComment(\n    id: $commentId\n    data: { Likes: { UserId: $likes }, Dislikes: { UserId: $dislikes } }\n  ) {\n    data {\n      id\n      attributes {\n        Likes {\n          UserId\n        }\n        Dislikes {\n          UserId\n        }\n      }\n    }\n  }\n}\n\n"];
export function gql(source: "\nquery getUser($userId: ID!) {\n  usersPermissionsUser(id: $userId) {\n    data {\n      attributes {\n        username\n        avatar {\n          img {\n            data {\n              id\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery getUser($userId: ID!) {\n  usersPermissionsUser(id: $userId) {\n    data {\n      attributes {\n        username\n        avatar {\n          img {\n            data {\n              id\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
export function gql(source: "\n  mutation AddComment($articleId: ID!, $userId: ID!, $content: String!, $date: DateTime!, $parentId: ID) {\n    createComment(\n      data: { article: $articleId, Author: $userId, Content: $content, Published: $date, Parent: $parentId }\n    ) {\n      data {\n        id\n        attributes {\n          Content\n          Author {\n            data {\n              id\n            }\n          }\n          article {\n            data {\n              id\n            }\n          }\n          Published\n          Parent {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddComment($articleId: ID!, $userId: ID!, $content: String!, $date: DateTime!, $parentId: ID) {\n    createComment(\n      data: { article: $articleId, Author: $userId, Content: $content, Published: $date, Parent: $parentId }\n    ) {\n      data {\n        id\n        attributes {\n          Content\n          Author {\n            data {\n              id\n            }\n          }\n          article {\n            data {\n              id\n            }\n          }\n          Published\n          Parent {\n            data {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n query Comments($slug: String) {\n  me {\n    id\n  }\n  comments(filters: { article: { Slug: { eq: $slug } }, Parent: null }) {\n    data {\n      id\n      attributes {\n        article {\n          data {\n            id\n            attributes {\n              Slug\n            }\n          }\n        }\n        Author {\n          data {\n            attributes {\n              username\n              avatar {\n                img {\n                  data {\n                    attributes {\n                      url\n                      hash\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        Content\n        Children {\n          data {\n            attributes {\n              Content\n              createdAt\n              updatedAt\n              Likes {\n                UserId\n              }\n              Dislikes {\n                UserId\n              }\n              Author {\n                data {\n                  attributes {\n                    username\n                    avatar {\n                      img {\n                        data {\n                          attributes {\n                            url\n                            hash\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        createdAt\n        updatedAt\n        Likes {\n          UserId\n        }\n        Dislikes {\n          UserId\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\n query Comments($slug: String) {\n  me {\n    id\n  }\n  comments(filters: { article: { Slug: { eq: $slug } }, Parent: null }) {\n    data {\n      id\n      attributes {\n        article {\n          data {\n            id\n            attributes {\n              Slug\n            }\n          }\n        }\n        Author {\n          data {\n            attributes {\n              username\n              avatar {\n                img {\n                  data {\n                    attributes {\n                      url\n                      hash\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        Content\n        Children {\n          data {\n            attributes {\n              Content\n              createdAt\n              updatedAt\n              Likes {\n                UserId\n              }\n              Dislikes {\n                UserId\n              }\n              Author {\n                data {\n                  attributes {\n                    username\n                    avatar {\n                      img {\n                        data {\n                          attributes {\n                            url\n                            hash\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        createdAt\n        updatedAt\n        Likes {\n          UserId\n        }\n        Dislikes {\n          UserId\n        }\n      }\n    }\n  }\n}\n"];
export function gql(source: "\n fragment SidebarArticlesFragment on Query {\n  sidebar: articles(sort: \"Published:desc\", pagination: { limit: 4 }) {\n    data {\n      id\n      attributes {\n        Slug\n        Title\n        Tagline\n        Published\n        Author {\n          data {\n            attributes {\n              username\n              avatar {\n                img {\n                  data {\n                    id\n                    attributes {\n                      url\n                      hash\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              id\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\n fragment SidebarArticlesFragment on Query {\n  sidebar: articles(sort: \"Published:desc\", pagination: { limit: 4 }) {\n    data {\n      id\n      attributes {\n        Slug\n        Title\n        Tagline\n        Published\n        Author {\n          data {\n            attributes {\n              username\n              avatar {\n                img {\n                  data {\n                    id\n                    attributes {\n                      url\n                      hash\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              id\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
export function gql(source: "\nmutation AddEmail($name: String!, $email: String!, $message: String!) {\n  createContact(data: { Name: $name, Email: $email, Message: $message }) {\n    data {\n      attributes {\n        Name\n        Email\n        Message\n      }\n    }\n  }\n}\n"): (typeof documents)["\nmutation AddEmail($name: String!, $email: String!, $message: String!) {\n  createContact(data: { Name: $name, Email: $email, Message: $message }) {\n    data {\n      attributes {\n        Name\n        Email\n        Message\n      }\n    }\n  }\n}\n"];
export function gql(source: "\n  query getAlbums($slug: String!) {\n    albums(filters: { Slug: { eq: $slug } }) {\n      data {\n        attributes {\n          Name\n          Tagline\n          Slug\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          GPhotoId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAlbums($slug: String!) {\n    albums(filters: { Slug: { eq: $slug } }) {\n      data {\n        attributes {\n          Name\n          Tagline\n          Slug\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          GPhotoId\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment AlbumFragment on Query {\n    albums(sort: \"Date:desc\") {\n      data {\n      id\n        attributes {\n          Name\n          Tagline\n          Slug\n          Date\n          Location\n          Photographer {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          GPhotoId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AlbumFragment on Query {\n    albums(sort: \"Date:desc\") {\n      data {\n      id\n        attributes {\n          Name\n          Tagline\n          Slug\n          Date\n          Location\n          Photographer {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          GPhotoId\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment BiographyFragment on Query {\nusersPermissionsUser(id:1){\n  data{\n    id\n    attributes{\n      biography\n      avatar{\n        img{\n          data{\n            id\n            attributes{\n              url\n              hash\n            }\n          }\n        }\n      }\n    }\n  }\n}}"): (typeof documents)["\n  fragment BiographyFragment on Query {\nusersPermissionsUser(id:1){\n  data{\n    id\n    attributes{\n      biography\n      avatar{\n        img{\n          data{\n            id\n            attributes{\n              url\n              hash\n            }\n          }\n        }\n      }\n    }\n  }\n}}"];
export function gql(source: "\n  fragment HeroFragment on Query {\n  home {\n    data {\n      attributes {\n        Hero {\n          id\n          Img {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          Caption\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\n  fragment HeroFragment on Query {\n  home {\n    data {\n      attributes {\n        Hero {\n          id\n          Img {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n          Caption\n        }\n      }\n    }\n  }\n}\n"];
export function gql(source: "\n  fragment RecentAlbumsFragment on Query {\n      albums(sort: \"Date:desc\", pagination: { start: 0, limit: 4 }) {\n    data {\n      id\n      attributes {\n        Slug\n        Name\n        Tagline\n        Date\n        Location\n        Photographer {\n          data {\n            attributes {\n              username\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n"): (typeof documents)["\n  fragment RecentAlbumsFragment on Query {\n      albums(sort: \"Date:desc\", pagination: { start: 0, limit: 4 }) {\n    data {\n      id\n      attributes {\n        Slug\n        Name\n        Tagline\n        Date\n        Location\n        Photographer {\n          data {\n            attributes {\n              username\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n"];
export function gql(source: "\n  fragment RecentArticlesFragment on Query {\n articles(sort:\"Published:desc\", pagination: { start: 0, limit: 3}){\n    data {\n      id\n      attributes {\n        Slug\n        Title\n        Tagline\n        Published\n        Author{\n          data{\n            attributes{\n              username\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n"): (typeof documents)["\n  fragment RecentArticlesFragment on Query {\n articles(sort:\"Published:desc\", pagination: { start: 0, limit: 3}){\n    data {\n      id\n      attributes {\n        Slug\n        Title\n        Tagline\n        Published\n        Author{\n          data{\n            attributes{\n              username\n            }\n          }\n        }\n        Cover {\n          img {\n            data {\n              attributes {\n                url\n                hash\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  }\n"];
export function gql(source: "\n  fragment NavigationFragment on Query {\n    navLink {\n      data {\n        attributes {\n          Link {\n            id\n            Name\n            URL\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NavigationFragment on Query {\n    navLink {\n      data {\n        attributes {\n          Link {\n            id\n            Name\n            URL\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment NewNavigationFragment on Query {\n    navLink {\n      data {\n        attributes {\n          Link {\n            id\n            Name\n            URL\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NewNavigationFragment on Query {\n    navLink {\n      data {\n        attributes {\n          Link {\n            id\n            Name\n            URL\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment ContactFragment on Resume {\n    Address\n    Phone\n  }\n"): (typeof documents)["\n  fragment ContactFragment on Resume {\n    Address\n    Phone\n  }\n"];
export function gql(source: "\n  fragment EducationFragment on Resume {\n    Education\n  }\n"): (typeof documents)["\n  fragment EducationFragment on Resume {\n    Education\n  }\n"];
export function gql(source: "\n  fragment HobbiesFragment on Resume {\n    Hobbies\n  }\n"): (typeof documents)["\n  fragment HobbiesFragment on Resume {\n    Hobbies\n  }\n"];
export function gql(source: "\n  fragment HighlightImgFragment on Resume {\n    Img {\n      img {\n        data {\n          id\n          attributes {\n            url\n            hash\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment HighlightImgFragment on Resume {\n    Img {\n      img {\n        data {\n          id\n          attributes {\n            url\n            hash\n          }\n        }\n      }\n    }\n  }\n"];
export function gql(source: "\n  fragment ResumeEmailFragment on Resume {\n    email\n  }\n"): (typeof documents)["\n  fragment ResumeEmailFragment on Resume {\n    email\n  }\n"];
export function gql(source: "\n  fragment SkillsFragment on Resume {\n    Skills\n  }\n"): (typeof documents)["\n  fragment SkillsFragment on Resume {\n    Skills\n  }\n"];
export function gql(source: "\n  fragment WorkExpFragment on Resume {\n    Experience\n  }\n"): (typeof documents)["\n  fragment WorkExpFragment on Resume {\n    Experience\n  }\n"];
export function gql(source: "\n  query GetAboutPage {\n    ...NavigationFragment\n    ...AboutCardFragment\n  }\n"): (typeof documents)["\n  query GetAboutPage {\n    ...NavigationFragment\n    ...AboutCardFragment\n  }\n"];
export function gql(source: "\n  query GetAlbumPage {\n    ...NavigationFragment\n    ...AlbumFragment\n  }\n"): (typeof documents)["\n  query GetAlbumPage {\n    ...NavigationFragment\n    ...AlbumFragment\n  }\n"];
export function gql(source: "\n  query GetArticles($start: Int!) {\n    ...NavigationFragment\n    ...ArticleListFragment\n    ...SidebarArticlesFragment\n  }\n"): (typeof documents)["\n  query GetArticles($start: Int!) {\n    ...NavigationFragment\n    ...ArticleListFragment\n    ...SidebarArticlesFragment\n  }\n"];
export function gql(source: "\nquery Articles {\n  articles {\n    data {\n      id\n      attributes {\n        Slug\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Articles {\n  articles {\n    data {\n      id\n      attributes {\n        Slug\n      }\n    }\n  }\n}\n"];
export function gql(source: "\n  query Article($slug: String) {\n    ...NavigationFragment\n    articles(filters: { Slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          Slug\n          Title\n          Tagline\n          Published\n          Content\n          Author {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...SidebarArticlesFragment\n  }\n"): (typeof documents)["\n  query Article($slug: String) {\n    ...NavigationFragment\n    articles(filters: { Slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          Slug\n          Title\n          Tagline\n          Published\n          Content\n          Author {\n            data {\n              attributes {\n                username\n              }\n            }\n          }\n          Cover {\n            img {\n              data {\n                attributes {\n                  url\n                  hash\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...SidebarArticlesFragment\n  }\n"];
export function gql(source: "\n  query GetContactPage {\n    ...NavigationFragment\n  }\n"): (typeof documents)["\n  query GetContactPage {\n    ...NavigationFragment\n  }\n"];
export function gql(source: "\n  query GetHomePage {\n    ...NavigationFragment\n    ...HeroFragment\n    ...BiographyFragment\n    ...RecentArticlesFragment\n    ...RecentAlbumsFragment\n  }\n"): (typeof documents)["\n  query GetHomePage {\n    ...NavigationFragment\n    ...HeroFragment\n    ...BiographyFragment\n    ...RecentArticlesFragment\n    ...RecentAlbumsFragment\n  }\n"];
export function gql(source: "\n  query GetResumeQuery {\n    resume {\n      data {\n        id\n        attributes {\n          ...ContactFragment\n          ...WorkExpFragment\n          ...EducationFragment\n          ...SkillsFragment\n          ...HighlightImgFragment\n          ...HobbiesFragment\n          ...ResumeEmailFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetResumeQuery {\n    resume {\n      data {\n        id\n        attributes {\n          ...ContactFragment\n          ...WorkExpFragment\n          ...EducationFragment\n          ...SkillsFragment\n          ...HighlightImgFragment\n          ...HobbiesFragment\n          ...ResumeEmailFragment\n        }\n      }\n    }\n  }\n"];

export function gql(source: string): unknown;
export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;